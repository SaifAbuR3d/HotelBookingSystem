<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HotelBookingSystem.Api</name>
    </assembly>
    <members>
        <member name="T:HotelBookingSystem.Api.Controllers.BookingsController">
            <summary>
            API endpoints for managing bookings
            </summary>>
            
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.BookingsController.#ctor(HotelBookingSystem.Application.ServiceInterfaces.IBookingService)">
            <summary>
            API endpoints for managing bookings
            </summary>>
            
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.BookingsController.GetBooking(System.Guid)">
            <summary>
            Get a booking by its id
            </summary>
            <param name="id">The id of the booking</param>
            <returns>The booking with the given id</returns>
            <response code="200">Returns the booking with the given id</response>
            <response code="404">If the booking is not found</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.BookingsController.CreateBooking(HotelBookingSystem.Application.DTOs.Booking.CreateBookingCommand)">
             <summary>
             Create a new booking
             </summary>
             <param name="request">The data for the new booking</param>
             <returns>The newly created booking</returns>
             <remarks>
             Sample request:
            
                 POST /booking
                 {
                    "guestId": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11",
                    "roomId": "31d26773-2eb9-4695-bc61-0b717bd97e0b",
                    "checkInDate": "2024-01-10",
                    "checkOutDate": "2024-01-15",
                    "numberOfAdults": 1,
                    "numberOfChildren": 1,
                    "userRemarks": "I need a baby cot.",
                    "paymentMethod": "CreditCard"
                 }
            
             </remarks>
             <response code="201">Returns the newly created booking</response>
             <response code = "404">If the hotel/room or guest is not found</response>
             <response code="400">If the request data is invalid</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.BookingsController.DeleteBooking(System.Guid)">
            <summary>
            Delete a booking
            </summary>
            <param name="id">The id of the booking to delete</param>
            <returns>No content</returns>
            <response code="204">If the booking is deleted</response>
            <response code="404">If the booking is not found</response>
        </member>
        <member name="T:HotelBookingSystem.Api.Controllers.CitiesController">
            <summary>
            API endpoints for managing cities
            </summary>>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.CitiesController.#ctor(HotelBookingSystem.Application.ServiceInterfaces.ICityService,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            API endpoints for managing cities
            </summary>>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.CitiesController.GetAllCities">
            <summary>
            Get all cities
            </summary>
            <returns>All cities</returns>
            <response code="200">Returns all cities</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.CitiesController.GetCity(System.Guid)">
            <summary>
            Get a city by its id
            </summary>
            <param name="id">The id of the city</param>
            <returns>The city with the given id</returns>
            <response code="200">Returns the city with the given id</response>
            <response code="404">If the city is not found</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.CitiesController.CreateCity(HotelBookingSystem.Application.DTOs.City.CreateCityCommand)">
             <summary>
             Create a new city
             </summary>
             <param name="request">The data for the new city</param>
             <returns>The newly created city</returns>
             <remarks>
             Sample request:
            
                 POST /cities
                 {
                    "name": "Budapest",
                    "country": "Hungary",
                    "postOffice": "1054"
                 }
            
             </remarks>
             <response code="201">Returns the newly created city</response>
             <response code="400">If the request data is invalid</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.CitiesController.DeleteCity(System.Guid)">
            <summary>
            Delete a city
            </summary>
            <param name="id">The id of the city to delete</param>
            <returns>No content</returns>
            <response code="204">If the city is deleted</response>
            <response code="404">If the city is not found</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.CitiesController.UpdateCity(System.Guid,HotelBookingSystem.Application.DTOs.City.UpdateCityCommand)">
            <summary>
            Update a city
            </summary>
            <param name="id">The id of the city to update</param>
            <param name="request">The data for the updated city</param>
            <returns>No content</returns>
            <response code="204">If the city is updated</response>
            <response code="400">If the request data is invalid</response>
            <response code="404">If the city is not found</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.CitiesController.MostVisitedCities(System.Int32)">
            <summary>
            Returns TOP N most visited cities, N is 5 by default
            </summary>
            <param name="count">The number of trending destinations to retrieve. Default is 5.</param>
            <returns>
            An asynchronous task representing the operation, returning an <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> containing a collection
            of <see cref="T:HotelBookingSystem.Application.DTOs.City.CityAsTrendingDestinationOutputModel"/> objects, each representing a trending destination city.
            </returns>
            <remarks>
            <para>
            This endpoint allows clients to retrieve a curated list of trending destinations, specifically the topmost visited cities.
            The response includes essential details for each city, such as its unique identifier, name, and a visually appealing thumbnail.
            </para>
            <para>
            The number of trending destinations to be retrieved can be specified using the <paramref name="count"/> parameter.
            If no count is provided, the default is set to 5.
            </para>
            </remarks>
            <example>
            <code>
            // Retrieves the top 3 trending destinations
            var trendingDestinations = await MostVisitedCities(3);
            // Process the trendingDestinations ActionResult as needed.
            </code>
            </example>
            <response code="200">Returns TOP N most visited cities, N is 5 by default</response>
            <seealso cref="T:HotelBookingSystem.Application.DTOs.City.CityAsTrendingDestinationOutputModel"/>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.CitiesController.UploadImage(System.Guid,Microsoft.AspNetCore.Http.IFormFile,System.String,System.Nullable{System.Boolean})">
            <summary>
            Upload an image to a city
            </summary>
            <param name="id">The id of the city to upload image</param>
            <param name="file">Image data</param>
            <param name="alternativeText">Alternative Text(Alt)</param>
            <param name="thumbnail">indicates if the image should be used as thumbnail</param>
            <returns></returns>
            <response code="204">If the image is successfully uploaded</response>
            <response code="404">If the city is not found</response>
            <response code="400">If the request data is invalid</response>
            
        </member>
        <member name="T:HotelBookingSystem.Api.Controllers.GuestsController">
            <summary>
            Controller for managing guests
            </summary>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.GuestsController.#ctor(HotelBookingSystem.Application.ServiceInterfaces.IGuestService)">
            <summary>
            Controller for managing guests
            </summary>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.GuestsController.GetRecentlyVisitedHotels(System.Guid,System.Int32)">
            <summary>
            Gets recently booked rooms for a guest
            </summary>
            <param name="guestId"></param>
            <param name="count"></param>
            <returns>the last 5 different hotels the guest visited</returns>
            <response code = "200">Returns the last 5 different hotels the guest visited</response>>
            <response code="404">If the guest is not found</response>
        </member>
        <member name="T:HotelBookingSystem.Api.Controllers.HotelsController">
            <summary>
            API endpoints for managing hotels
            </summary>>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.HotelsController.#ctor(HotelBookingSystem.Application.ServiceInterfaces.IHotelService,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            API endpoints for managing hotels
            </summary>>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.HotelsController.GetAllHotels">
            <summary>
            Get all hotels
            </summary>
            <returns>All hotels</returns>
            <response code="200">Returns all hotels</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.HotelsController.GetHotel(System.Guid)">
            <summary>
            Get a hotel by its id
            </summary>
            <param name="id">The id of the hotel</param>
            <returns>The hotel with the given id</returns>
            <response code="200">Returns the hotel with the given id</response>
            <response code="404">If the hotel is not found</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.HotelsController.CreateHotel(HotelBookingSystem.Application.DTOs.Hotel.CreateHotelCommand)">
             <summary>
             Create a new hotel
             </summary>
             <param name="request">The data for the new hotel</param>
             <returns>The newly created hotel</returns>
             <remarks> 
                 /// Sample request:
            
                 POST /hotels
                 {
                    "name": "Hotel Budapest",
                    "owner": "Hungarian Hotels Ltd.",
                    "location": "Budapest, 1054 Szabadság tér 9-10.",
                    "cityName": "Budapest"
                    "starRate" : "4"
                 }
            
             </remarks>
             <response code="201">Returns the newly created hotel</response>
             <response code="400">If the request data is invalid</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.HotelsController.DeleteHotel(System.Guid)">
            <summary>
            Delete a hotel
            </summary>
            <param name="id">The id of the hotel to delete</param>
            <returns>No content</returns>
            <response code="204">If the hotel is successfully deleted</response>
            <response code="404">If the hotel is not found</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.HotelsController.UpdateHotel(System.Guid,HotelBookingSystem.Application.DTOs.Hotel.UpdateHotelCommand)">
            <summary>
            Update a hotel
            </summary>
            <param name="id">The id of the hotel to update</param>
            <param name="request">The data for the uploaded hotel</param>
            <returns>No content</returns>
            <response code="204">If the hotel is successfully uploaded</response>
            <response code="404">If the hotel is not found</response>
            <response code="400">If the request data is invalid</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.HotelsController.UploadImage(System.Guid,Microsoft.AspNetCore.Http.IFormFile,System.String,System.Nullable{System.Boolean})">
            <summary>
            Upload an image to a hotel
            </summary>
            <param name="id">The id of the hotel to upload image</param>
            <param name="file">Image data</param>
            <param name="alternativeText">Alternative Text(Alt)</param>
            <param name="thumbnail">indicates if the image should be used as thumbnail</param>
            <returns></returns>
            <response code="204">If the image is successfully uploaded</response>
            <response code="404">If the hotel is not found</response>
            <response code="400">If the request data is invalid</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.HotelsController.AddReview(System.Guid,HotelBookingSystem.Application.DTOs.Review.CreateOrUpdateReviewCommand)">
            <summary>
            Adds a review for a specific hotel.
            </summary>
            <param name="id">The ID of the hotel for which the review is added.</param>
            <param name="request">The model containing review details.</param>
            <returns>The newly created Review</returns>
            <response code="201">Review successfully added.</response>
            <response code="400">Invalid input or missing required fields.</response>
            <response code="401">User is not authenticated.</response>
            <response code="403">User is authenticated but doesn't have the necessary permissions.</response>
            <response code="404">Hotel with the specified id not found.</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.HotelsController.GetReview(System.Guid,System.Guid)">
            <summary>
            Get a review by its id
            </summary>
            <param name="id">The id of the hotel</param>
            <param name="reviewId">The id of the review</param>
            <returns>The review with the given id</returns>
            <response code="200">Returns the review with the given id</response>
            <response code="404">If the review is not found</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.HotelsController.GetHotelReviews(System.Guid)">
            <summary>
            Get list of reviews for a hotel
            </summary>
            <param name="id">The id of the hotel</param>
            <returns>List of reviews for the hotel</returns>
            <response code="200">Returns list of reviews for the hotel</response>
            <response code="404">If the hotel is not found</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.HotelsController.GetHotelAverageRating(System.Guid)">
            <summary>
            Get hotel average rating
            </summary>
            <param name="id">The id of the hotel</param>
            <returns>Hotel average user ratings</returns>
            <response code="200">Returns hotel average rating</response>
            <response code="404">If the hotel is not found</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.HotelsController.UpdateReview(System.Guid,System.Guid,HotelBookingSystem.Application.DTOs.Review.CreateOrUpdateReviewCommand)">
            <summary>
            Update a review
            </summary>
            <param name="id">The id of the hotel having the review to update</param>
            <param name="reviewId">The id of the review to update</param>
            <param name="request">The data for the updated review</param>
            <returns>No content</returns>
            <response code="204">If the review is successfully updated</response>
            <response code="404">If the hotel or review is not found</response>
            <response code="400">If the request data is invalid</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.HotelsController.DeleteReview(System.Guid,System.Guid)">
            <summary>
            Delete a review
            </summary>
            <param name="id">The id of the hotel having the review to delete</param>
            <param name="reviewId">The id of the review to delete</param>
            <returns>No content</returns>
            <response code="204">If the review is successfully deleted</response>
            <response code="404">If the hotel is not found</response>
        </member>
        <member name="T:HotelBookingSystem.Api.Controllers.RoomsController">
            <summary>
            API endpoints for managing rooms
            </summary>>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.RoomsController.#ctor(HotelBookingSystem.Application.ServiceInterfaces.IRoomService,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            API endpoints for managing rooms
            </summary>>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.RoomsController.GetAllRooms">
            <summary>
            Get all rooms
            </summary>
            <returns>All rooms</returns>
            <response code="200">Returns all rooms</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.RoomsController.GetRoom(System.Guid)">
            <summary>
            Get a room by its id
            </summary>
            <param name="id">The id of the room</param>
            <returns>The room with the given id</returns>
            <response code="200">Returns the room with the given id</response>
            <response code="404">If the room is not found</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.RoomsController.CreateRoom(HotelBookingSystem.Application.DTOs.Room.CreateRoomCommand)">
             <summary>
             Create a new room
             </summary>
             <param name="request">The data for the new room</param>
             <returns>The newly created room</returns>
             <remarks>
             Sample request:
            
                 POST /rooms
                 {
                    "hotelName": "Hotel Budapest",
                    "roomNumber": "101",
                    "adultsCapacity": 2,
                    "childrenCapacity": 1,
                    "price": 100,
                    "roomType": "Standard"
                 }
            
             </remarks>
             <response code="201">Returns the newly created room</response>
             <response code="400">If the request data is invalid</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.RoomsController.DeleteRoom(System.Guid)">
            <summary>
            Delete a room
            </summary>
            <param name="id">The id of the room to delete</param>
            <returns>No content</returns>
            <response code="204">If the room is successfully deleted</response>
            <response code="404">If the room is not found</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.RoomsController.UpdateRoom(System.Guid,HotelBookingSystem.Application.DTOs.Room.UpdateRoomCommand)">
            <summary>
            Update a room
            </summary>
            <param name="id">The id of the room to update</param>
            <param name="request">The new data for the room</param>
            <returns>No content</returns>
            <response code="204">If the room is successfully updated</response>
            <response code="404">If the room is not found</response>
            <response code="400">If the request data is invalid</response>
        </member>
        <member name="M:HotelBookingSystem.Api.Controllers.RoomsController.UploadImage(System.Guid,Microsoft.AspNetCore.Http.IFormFile,System.String,System.Nullable{System.Boolean})">
            <summary>
            Upload an image to a room
            </summary>
            <param name="id">The id of the room to upload image</param>
            <param name="file">Image data</param>
            <param name="alternativeText">Alternative Text(Alt)</param>
            <param name="thumbnail">indicates if the image should be used as thumbnail</param>
            <returns></returns>
            <response code="204">If the image is successfully uploaded</response>
            <response code="404">If the room is not found</response>
            <response code="400">If the request data is invalid</response>
        </member>
        <member name="T:HotelBookingSystem.Api.GlobalExceptionHandler">
            <summary>
            Exception Handling Middleware
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:HotelBookingSystem.Api.GlobalExceptionHandler.#ctor(Microsoft.Extensions.Logging.ILogger{HotelBookingSystem.Api.GlobalExceptionHandler})">
            <summary>
            Exception Handling Middleware
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:HotelBookingSystem.Api.GlobalExceptionHandler.TryHandleAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Handles the exception
            </summary>
            <param name="httpContext"></param>
            <param name="exception"></param>
            <param name="cancellationToken"></param>
            <returns>true if the exception was properly handled</returns>
        </member>
    </members>
</doc>
